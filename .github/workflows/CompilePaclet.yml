name: Compile Paclet
on: 
  push: 
    branches:  [main]
  pull_request: 
    branches:  [main]
  workflow_dispatch:
jobs: 
  Compile-Windows-x86-64: 
    name: Compile (Windows-x86-64)
    runs-on: windows-latest
    env: 
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAM_LIBRARY_BUILD_SCRIPT: ./Scripts/Compile.wls
      WOLFRAM_LIBRARY_BUILD_OUTPUT: LibraryResources/
      WOLFRAM_SYSTEM_ID: Windows-x86-64
      WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL: https://files.wolframcdn.com/packages/winget/13.0.0.0/WolframEngine_13.0.0_WIN.msi
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
      WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY: WolframEngine
    timeout-minutes: 20
    steps: 
    - name: Checkout Code
      id: checkout-code
      uses: actions/checkout@v2
    - name: Cache/restore Wolfram Engine install
      id: cache-restore-step
      uses: actions/cache@v2
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
      with: 
        path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
        key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
    - name: Download and install Wolfram Engine
      if: steps.cache-restore-step.outputs.cache-hit != 'true'
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
        WOLFRAMENGINE_INSTALL_MSI_PATH: '${{ runner.temp }}\WolframEngine-Install.msi'
        WOLFRAMENGINE_INSTALL_LOG_PATH: '${{ runner.temp }}\WolframEngine-Install.log'
      run: |
        echo 'Downloading Wolfram Engine installer...'
        $msiFile = '${{ env.WOLFRAMENGINE_INSTALL_MSI_PATH }}'
        $logFile = '${{ env.WOLFRAMENGINE_INSTALL_LOG_PATH }}'
        Import-Module BitsTransfer
        Start-BitsTransfer '${{ env.WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL }}' $msiFile
        echo 'Downloaded Wolfram Engine installer.'
        $DataStamp = get-date -Format yyyyMMddTHHmmss
        $MSIArguments = @(
            "/i"
            ('"{0}"' -f $msiFile)
            'INSTALLLOCATION="${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}"'
            "/qn"
            "/norestart"
            "/L*v"
            $logFile
        )
        echo 'Installing Wolfram Engine...'
        Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
        echo 'Installed Wolfram Engine.'
    - name: Compile libraries
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
        WOLFRAMINIT: "-pwfile !cloudlm.wolfram.com -entitlement ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}"
      run: |
        $env:Path += ';${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}\'
        wolfram -script ${{ env.WOLFRAM_LIBRARY_BUILD_SCRIPT }}
    - name: Archive compiled libraries
      uses: actions/upload-artifact@v2
      with: 
        name: ${{ env.WOLFRAM_SYSTEM_ID }}
        path: ${{ env.WOLFRAM_LIBRARY_BUILD_OUTPUT }}/${{ env.WOLFRAM_SYSTEM_ID }}
  Compile-MacOSX-x86-64: 
    name: Compile (MacOSX-x86-64)
    runs-on: macos-latest
    env: 
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAM_LIBRARY_BUILD_SCRIPT: ./Scripts/Compile.wls
      WOLFRAM_LIBRARY_BUILD_OUTPUT: LibraryResources/
      WOLFRAM_SYSTEM_ID: MacOSX-x86-64
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: "/Applications/Wolfram Engine.app"
    timeout-minutes: 20
    steps: 
    - name: Checkout Code
      id: checkout-code
      uses: actions/checkout@v2
    - name: Cache/restore Wolfram Engine install
      id: cache-restore-step
      uses: actions/cache@v2
      with: 
        path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
        key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
    - name: Download and install Wolfram Engine
      if: steps.cache-restore-step.outputs.cache-hit != 'true'
      run: |
        echo 'Installing Wolfram Engine...'
        brew install --cask wolfram-engine
        echo 'Installed Wolfram Engine.'
    - name: Compile libraries
      env: 
        WOLFRAMENGINE_EXECUTABLES_DIRECTORY: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/Resources/Wolfram Player.app/Contents/MacOS"
        WOLFRAMSCRIPT_KERNELPATH: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/MacOS/WolframKernel"
      run: |
        export PATH="${{ env.WOLFRAMENGINE_EXECUTABLES_DIRECTORY }}:$PATH"
        wolframscript -debug -verbose -script ${{ env.WOLFRAM_LIBRARY_BUILD_SCRIPT }}
    - name: Archive compiled libraries
      uses: actions/upload-artifact@v2
      with: 
        name: ${{ env.WOLFRAM_SYSTEM_ID }}
        path: ${{ env.WOLFRAM_LIBRARY_BUILD_OUTPUT }}/${{ env.WOLFRAM_SYSTEM_ID }}
  Compile-Linux-x86-64: 
    name: Compile (Linux-x86-64)
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAM_LIBRARY_BUILD_SCRIPT: ./Scripts/Compile.wls
      WOLFRAM_LIBRARY_BUILD_OUTPUT: LibraryResources/
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    timeout-minutes: 20
    steps: 
    - name: Checkout Code
      id: checkout-code
      uses: actions/checkout@v2
    - name: Install build tools
      run: |
        apt-get -y update
        apt-get -y install build-essential
    - name: Compile libraries
      run: wolframscript -script ${{ env.WOLFRAM_LIBRARY_BUILD_SCRIPT }}
    - name: Archive compiled libraries
      uses: actions/upload-artifact@v2
      with: 
        name: ${{ env.WOLFRAM_SYSTEM_ID }}
        path: ${{ env.WOLFRAM_LIBRARY_BUILD_OUTPUT }}/${{ env.WOLFRAM_SYSTEM_ID }}
  BuildPaclet: 
    name: Build Paclet
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    timeout-minutes: 20
    needs:  [Compile-Windows-x86-64, Compile-MacOSX-x86-64, Compile-Linux-x86-64]
    steps: 
    - name: Checkout Code
      id: checkout-code
      uses: actions/checkout@v2
    - name: Download compiled library resources
      id: download-compilation-artifacts-step
      uses: actions/download-artifact@v2
      with: 
        path: LibraryResources
    - name: Build Paclet
      id: build-paclet-step
      uses: rhennigan/build-paclet@v1.4.0
      with: 
        target: Submit
        paclet_cicd_version: 0.2.2
        definition_notebook: ./DefinitionNotebook.nb
    - name: Upload Build Artifacts
      id: upload-build-artifacts-step
      uses: actions/upload-artifact@v2
      with: 
        path: ${{ env.BUILD_DIR }}
        if-no-files-found: error